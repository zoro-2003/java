interface BinaryTree<T> {
void add(T value);              
boolean remove(T value);       
void traverseInOrder();           
}
class BinarySearchTree<T extends Comparable<T>> implements BinaryTree<T> {
private static class Node<T> {
     T value;
     Node<T> left;
     Node<T> right;
     Node(T value) {
         this.value = value;
         left = null;
         right = null;
     }
}
private Node<T> root;
 
public BinarySearchTree() {
     root = null;
}
public void add(T value) {
     root = addRecursive(root, value);
}
private Node<T> addRecursive(Node<T> node, T value) {
     if (node == null) {
         return new Node<>(value);
     }
 
     if (value.compareTo(node.value) < 0) {
         node.left = addRecursive(node.left, value);
     } else if (value.compareTo(node.value) > 0) {
         node.right = addRecursive(node.right, value);
     }
     return node;
}
public boolean remove(T value) {
     // Wrapper for the recursive remove method
     int initialSize = size();
     root = removeRecursive(root, value);
     return size() < initialSize;
}
private Node<T> removeRecursive(Node<T> node, T value) {
     if (node == null) {
         return null;
     }
     if (value.compareTo(node.value) < 0) {
         node.left = removeRecursive(node.left, value);
     } else if (value.compareTo(node.value) > 0) {
         node.right = removeRecursive(node.right, value);
     } else {
         if (node.left == null && node.right == null) {
             return null; // No children
         } else if (node.left == null) {
             return node.right; 
         } else if (node.right == null) {
             return node.left;
         } else {
             // Two children
             T smallestValue = findSmallestValue(node.right);
             node.value = smallestValue;
             node.right = removeRecursive(node.right, smallestValue);
         }
     }
     return node;
}
private T findSmallestValue(Node<T> node) {
     return node.left == null ? node.value : findSmallestValue(node.left);
}
public void traverseInOrder() {
     traverseInOrderRecursive(root);
     System.out.println();
}
private void traverseInOrderRecursive(Node<T> node) {
     if (node != null) {
         traverseInOrderRecursive(node.left);
         System.out.print(node.value + " ");
         traverseInOrderRecursive(node.right);
     }
}
public int size() {
     return sizeRecursive(root);
}
private int sizeRecursive(Node<T> node) {
     if (node == null) {
         return 0;
     }
     return 1 + sizeRecursive(node.left) + sizeRecursive(node.right);
}
}
public class BinaryTreeDemo {
public static void main(String[] args) {
     System.out.println("Binary Search Tree Example");
     System.out.println("ADITYA SHIRSAT " + "C24111");
     BinarySearchTree<Integer> bst = new BinarySearchTree<>();
     bst.add(50);
     bst.add(30);
     bst.add(70);
     bst.add(20);
     bst.add(40);
     bst.add(60);
     bst.add(80);
     System.out.print("In-order traversal: ");
     bst.traverseInOrder(); 
     bst.remove(50);
     System.out.print("After removing 50, in-order traversal: ");
     bst.traverseInOrder(); 
     bst.add(65);
     System.out.print("After adding 65, in-order traversal: ");
     bst.traverseInOrder();
}
}