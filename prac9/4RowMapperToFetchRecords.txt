create database spring;
use spring;
CREATE TABLE employees (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50),
    department VARCHAR(50),
    salary DOUBLE
);


INSERT INTO employees (name, department, salary) VALUES
('John Doe', 'HR', 50000),
('Jane Smith', 'IT', 60000),
('Emily Davis', 'HR', 55000),
('Michael Brown', 'Finance', 70000);



pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>prac9_4</groupId>
  <artifactId>prac9_4</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>prac9_4</name>
  <dependencies>
    <!-- Spring JDBC -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-jdbc</artifactId>
        <version>5.3.30</version> <!-- Adjust the version to your needs -->
    </dependency>

    <!-- Spring Context (for ApplicationContext) -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>5.3.30</version>
    </dependency>

    <!-- MySQL Connector -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>8.0.32</version> <!-- Adjust version as necessary -->
    </dependency>
</dependencies>

</project>




AppConfig.java
package prac9_4;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import javax.sql.DataSource;

@Configuration
@ComponentScan(basePackages = "prac9_4") // Replace with your package name
public class AppConfig {

    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
        dataSource.setUrl("jdbc:mysql://localhost:3306/spring"); // Replace with your DB name
        dataSource.setUsername("root"); // Replace with your username
        dataSource.setPassword("system"); // Replace with your password
        return dataSource;
    }

    @Bean
    public JdbcTemplate jdbcTemplate(DataSource dataSource) {
        return new JdbcTemplate(dataSource);
    }
}


Employee.java
package prac9_4;

public class Employee {
    private int id;
    private String name;
    private String department;
    private double salary;

    // Getters and setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "Employee{id=" + id + ", name='" + name + "', department='" + department + "', salary=" + salary + '}';
    }
}


EmployeeRowMapper.java
package prac9_4;

import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;

public class EmployeeRowMapper implements RowMapper<Employee> {
    @Override
    public Employee mapRow(ResultSet rs, int rowNum) throws SQLException {
        Employee employee = new Employee();
        employee.setId(rs.getInt("id"));
        employee.setName(rs.getString("name"));
        employee.setDepartment(rs.getString("department"));
        employee.setSalary(rs.getDouble("salary"));
        return employee;
    }
}



EmployeeService.java
package prac9_4;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class EmployeeService {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    // Fetch all employees using RowMapper
    public List<Employee> getAllEmployees() {
        String sql = "SELECT * FROM employees";
        return jdbcTemplate.query(sql, new EmployeeRowMapper());
    }

    // Fetch employees by department using RowMapper
    public List<Employee> getEmployeesByDepartment(String department) {
        String sql = "SELECT * FROM employees WHERE department = ?";
        return jdbcTemplate.query(sql, new Object[]{department}, new EmployeeRowMapper());
    }
}


 SpringJdbcRowMapperExample.java
package prac9_4;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import java.util.List;

public class SpringJdbcRowMapperExample {

    public static void main(String[] args) {
        // Initialize Spring context
        ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);

        // Get EmployeeService bean
        EmployeeService employeeService = context.getBean(EmployeeService.class);

        // Fetch all employees
        System.out.println("All Employees:");
        List<Employee> employees = employeeService.getAllEmployees();
        employees.forEach(System.out::println);

        // Fetch employees in HR department
        System.out.println("\nEmployees in HR Department:");
        List<Employee> hrEmployees = employeeService.getEmployeesByDepartment("HR");
        hrEmployees.forEach(System.out::println);
    }
}
